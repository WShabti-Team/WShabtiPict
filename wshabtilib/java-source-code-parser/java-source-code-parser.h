#ifndef __JAVA_SOURCE_CODE_PARSER_H__
#define __JAVA_SOURCE_CODE_PARSER_H__

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Gets class name from .java file 
 * INPUT:
 *		source code path in filesystem
 * 
 * OUTPUT:
 * 		string containing class name
 */ 
//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string get_class_name(std::string source_code_path);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Gets all prototypes from .java file 
 * INPUT:
 *		source code path in filesystem
 * 
 * OUTPUT:
 * 		string vector containing all method prototypes
 */ 
//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<std::string> get_prototypes(std::string source_code_path);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Gets all NAMES (without types) from a prototype
 * e.g int sum(int first, int second, int third) -> ["sum","first","second","third"]
 * 
 * INPUT:
 *		string of method prototype
 * 
 * OUTPUT:
 * 		string vector containing all names
 */ 
//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<std::string> get_method_and_values_name(std::string method_prototype);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Gets parameters from a method prototype
 * e.g int sum(int first, int second, int third) -> "(int first, int second, int third)"
 * 
 * INPUT:
 *		string of method prototype
 * 
 * OUTPUT:
 * 		string containing method parameters (with types)
 */ 
//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string get_prototype_arguments(std::string method_prototype);

#endif